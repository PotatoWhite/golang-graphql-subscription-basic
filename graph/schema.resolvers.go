package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.28

import (
	"context"
	"log"
	"math/rand"
	"strconv"
	"time"

	"github.com/potatowhite/golang-graphql-basic/graph/model"
)

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Subscription returns SubscriptionResolver implementation.
func (r *Resolver) Subscription() SubscriptionResolver { return &subscriptionResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }

func (q queryResolver) Ping(ctx context.Context) (string, error) {
	return "pong", nil
}

type subscriptionResolver struct{ *Resolver }

func NewResolver() *Resolver {
	return &Resolver{
		messageSent: make(map[string]chan *model.Message),
	}
}

func (s *subscriptionResolver) MessageSent(ctx context.Context) (<-chan *model.Message, error) {
	messageChan := make(chan *model.Message, 1)

	s.mu.Lock()
	id := "client_" + strconv.Itoa(rand.Int())
	s.messageSent[id] = messageChan
	s.mu.Unlock()

	go func() {
		<-ctx.Done()
		s.mu.Lock()
		delete(s.messageSent, id)
		log.Printf("Client disconnected: %s", id)
		s.mu.Unlock()
	}()

	log.Printf("New client connected: %s", id)

	return messageChan, nil
}

func (m *mutationResolver) SendMessage(ctx context.Context, content string) (*model.Message, error) {
	msg := &model.Message{
		ID:        strconv.Itoa(rand.Int()),
		Content:   content,
		CreatedAt: time.Now().Format(time.RFC3339),
	}

	m.mu.Lock()
	for _, messageChan := range m.messageSent {
		messageChan <- msg
	}
	m.mu.Unlock()

	return msg, nil
}
